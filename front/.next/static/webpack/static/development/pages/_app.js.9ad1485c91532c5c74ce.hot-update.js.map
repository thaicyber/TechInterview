{"version":3,"file":"static/webpack/static/development/pages/_app.js.9ad1485c91532c5c74ce.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport GlobalStyles from \"../styles/GlobalStyles\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport { createStore } from \"redux\";\nimport reducer from \"../reducers/user\";\nconst App = ({ Component, store }) => {\n  return (\n    <Provider store={store}>\n      <GlobalStyles />\n      <Head>\n        <title>Frank</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css\"\n        />\n      </Head>\n      <Component />\n    </Provider>\n  );\n};\n\nexport default withRedux((initialState, options) => {\n  const middlewares = [sagaMiddleware]; // 이곳에 사용할 미들웨어 입력\n  // 리덕스에 기능을 향상시키겠다.\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : compose(\n          applyMiddleware(...middlewares),\n          !options.isServer &&\n            typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        );\n  const store = createStore(reducer, initialState);\n  return store;\n})(App);\n// 이렇게 감싸주면 기존 App컴포넌트의 기능을 왼쪾의 withRedux기능도 생기면서 확장해주는 개념임.\n// withRedux는 App컴포넌트에게 props로 store를 넣어주는 역할을 할거임.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AAEA;AACA;AACA;AAEA;;;;A","sourceRoot":""}